// Universidad del Valle de Guatemala
// Electrónica Digital 2
// Ana Carolina Gramajo Quijivix - 22401
// Implementa dos protocolos de comunicación con el ESP32.
// Se utiliza la comunicación I2C para recibir el valor de un potenciómetro del ESP32.
// Se utiliza la comunicación SPI enviar información sobre el led que se desea encender y por cuánto tiempo. 

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define deviceAddress 0x55 // Dirección del esclavo
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t salto[] = "\n";
uint8_t error[] = "\n No es un dato correcto.\n"; // Mensaje cuando se produce un error
uint8_t TX_Buffer[1]; // Lee la respuesta del menú principal
// Comunicación I2C
uint8_t RX_Buffer[4]; // Recibe el valor del potenciómetro
// Comunicación SPI
uint8_t buffer[6]; // Recibe los datos ingresados por el usuario en el formato led,tiempo
uint8_t LED_Buffer[8]; // Almacena el led a encender y el tiempo en milisegundos
uint8_t led; // Variable que guarda el valor del led a encender
uint16_t tiempo; // Variable que guarda el valor del tiempo a encender la led
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Menú principal
	  uint8_t menu[] = "\nSeleccione lo que desea realizar. \n 1. Controlar dispositivo SPI. \n 2. Obtener el valor del sensor I2C. \n";
	  // Despliega el menú
	  HAL_UART_Transmit(&huart2, (uint8_t*)salto, sizeof(salto), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart2, menu, sizeof(menu), HAL_MAX_DELAY);
	  HAL_Delay(1000);
	  // Recibe la opción ingresada por el usuario
	  HAL_UART_Receive(&huart2, (uint8_t *)TX_Buffer, 1, HAL_MAX_DELAY);
	  // Determina qué eligió el usuario
	  if (TX_Buffer[0] == 50) { // 50 es 2 en ascii, quiere leer el potenciómetro
		  // Recibe el dato del potenciómetro
		  HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1)|0x01, (uint8_t *)RX_Buffer, sizeof(RX_Buffer), HAL_MAX_DELAY);
		  HAL_Delay(100);
		  // Vuelve a mandar la solicitud para que el valor se actualice
		  HAL_I2C_Master_Receive(&hi2c1, (deviceAddress << 1)|0x01, (uint8_t *)RX_Buffer, sizeof(RX_Buffer), HAL_MAX_DELAY);
		  // Muestra el valor recibido en la interfaz Hércules
		  HAL_UART_Transmit(&huart2, (uint8_t *)salto, sizeof(salto), HAL_MAX_DELAY); // Inserta un salto de línea
		  HAL_UART_Transmit(&huart2, (uint8_t *)RX_Buffer, sizeof(RX_Buffer), HAL_MAX_DELAY);
		  HAL_Delay(1000);
	  } else if (TX_Buffer[0] == 49) { // 49 es 1 en ASCII, quiere controlar las leds
		  uint8_t escoger[] = "\nIngrese el led que desea encender y el tiempo (en ms) que desea que permanezca encendido.\n";
		  uint8_t opciones[] = "Ingrese 1 para el led blanco, 2 para el led amarillo y 3 para el led rojo.\n";
		  uint8_t formato[] = "Utilice el formato que se muestra: 1,500\n";
		  uint8_t limite[] = "Por favor ingrese un tiempo mayor o igual a 1000 ms (1 segundo)\n";
		  // Muestra los mensajes en la interfaz Hércules
		  HAL_UART_Transmit(&huart2, escoger, sizeof(escoger), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, opciones, sizeof(opciones), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, formato, sizeof(formato), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, limite, sizeof(limite), HAL_MAX_DELAY);
		  // Recibe los datos ingresados por el usuario en el formato led,tiempo
		  HAL_UART_Receive(&huart2, (uint8_t*)buffer, sizeof(buffer), 30000);
		  // Muestra el buffer recibido en la interfaz hércules
		  HAL_UART_Transmit(&huart2, (uint8_t*)salto, sizeof(salto), HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(LED_Buffer), HAL_MAX_DELAY);
		  // Procesa el buffer
		  char *negativo = strtok(buffer, "-"); // Toma el buffer hasta que encuentra un signo menos
		  if (negativo != NULL) {
			  char *segmento = strtok(buffer, ","); // Toma el buffer hasta que encuentra la primera coma, luego la reemplaza por \0
			  if (segmento != NULL) { // Sí hay una coma en el buffer
				  led = strtol(segmento, NULL, 10); // Convierte el segmento en un número entero
				  segmento = strtok(NULL, ","); // Toma otro segmento desde que se encontró la coma
				  if (segmento != NULL) { // Sí hay datos disponibles
					  tiempo = strtol(segmento, NULL, 10); // Convierte el segmento en un número entero
					  if (led>0 && led<4 && tiempo>999) {
						  // Crea un nuevo buffer que se enviará al ESP32
						  LED_Buffer[0] = led; // Guarda el valor del led en el primer elemento
						  // Divide el tiempo (uint16_t) en dos números uint8_t
						  LED_Buffer[1] = (tiempo >> 8) & 0xFF; // Byte más significativo
						  LED_Buffer[2] = tiempo & 0xFF; // Byte menos segnificativo
						  // Rellena el resto del buffer con ceros
						  for (int i = 3; i < sizeof(LED_Buffer); i++) {
							  LED_Buffer[i] = 0;
						  }
						  HAL_Delay(1000);
						  // Habilita la comunicación SPI
						  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port, ESP32_CS_Pin, GPIO_PIN_RESET);
						  // Manda el nuevo buffer
						  HAL_SPI_Transmit(&hspi1, (uint8_t*)LED_Buffer, sizeof(LED_Buffer), HAL_MAX_DELAY);
						  HAL_Delay(50);
						  // Deshabilita la comunicación SPI
						  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port, ESP32_CS_Pin, GPIO_PIN_SET);
					  } else {
						  HAL_UART_Transmit(&huart2, (uint8_t*)error, sizeof(error), HAL_MAX_DELAY);
					  }
				  } else {
					  HAL_UART_Transmit(&huart2, (uint8_t*)error, sizeof(error), HAL_MAX_DELAY);
				  }
			  } else {
				  HAL_UART_Transmit(&huart2, (uint8_t*)error, sizeof(error), HAL_MAX_DELAY);
			  }
		  } else {
			  HAL_UART_Transmit(&huart2, (uint8_t*)error, sizeof(error), HAL_MAX_DELAY);
		  }
		  memset(buffer, 0, sizeof(buffer)); // Reinicia el buffer
		  HAL_Delay(2000);
	  } else {
		  HAL_UART_Transmit(&huart2, (uint8_t *)error, sizeof(error), HAL_MAX_DELAY);
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_CS_GPIO_Port, ESP32_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ESP32_CS_Pin */
  GPIO_InitStruct.Pin = ESP32_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ESP32_CS_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
